datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  USER
}

enum SliceState {
  //未切图或切图失败
  PENDING
  //切图中
  SLICING
  //切图并保存成功
  SUCCESS
}

enum Language {
  CHINESE
  ENGLISH
  JAPANESE
  KOREAN
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  name      String
  role      Role
}

model ScenicRegion {
  id                      String           @id @default(uuid())
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  name                    String
  location                String
  handDrawingUri          String
  handDrawingNE           String
  handDrawingSW           String
  vrUrl                   String
  ticketUrl               String
  zoom                    Int
  minZoom                 Int
  maxZoom                 Int
  title                   String
  layer                   String
  layersDisplayName       String
  enableNavigation        Boolean
  enablePoiLanguageSwitch Boolean
  lang                    Language         @default(CHINESE)
  sliceState              SliceState       @default(PENDING)
  scenicSpots             ScenicSpot[]
  touringRoutes           TouringRoute[]
  scenicSpotTypes         ScenicSpotType[]
}

model ScenicSpotType {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  rank           Int
  lang           Language
  ScenicRegion   ScenicRegion? @relation(fields: [scenicRegionId], references: [id])
  scenicRegionId String?
  ScenicSpot     ScenicSpot[]
}

model ScenicSpot {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  scenicRegionId   String
  scenicRegion     ScenicRegion   @relation(fields: [scenicRegionId], references: [id])
  name             String
  scenicSpotTypeId String
  scenicSpotType   ScenicSpotType @relation(fields: [scenicSpotTypeId], references: [id])
  introduction     String
  iconUri          String
  audioUri         String
  imageUri         String
  lang             Language       @default(CHINESE)
  hidden           Boolean
}

model TouringRoute {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  scenicRegionId String
  scenicRegion   ScenicRegion @relation(fields: [scenicRegionId], references: [id])
  title          String
  content        String
  lang           Language     @default(CHINESE)
}
