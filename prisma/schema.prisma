generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  name      String   @db.VarChar(32)
  role      Role
}

model ScenicRegion {
  id                      String             @id @default(uuid())
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  displayName             String             @db.VarChar(32)
  locationLat             Float              @db.DoublePrecision
  locationLng             Float              @db.DoublePrecision
  handDrawingNELat        Float              @db.DoublePrecision
  handDrawingNELng        Float              @db.DoublePrecision
  handDrawingSWLat        Float              @db.DoublePrecision
  handDrawingSWLng        Float              @db.DoublePrecision
  zoom                    Int
  minZoom                 Int
  maxZoom                 Int
  enableNavigation        Boolean
  enablePoiLanguageSwitch Boolean
  sliceState              SliceState         @default(PENDING)
  scenicRegionInfos       ScenicRegionInfo[]
  scenicSpots             ScenicSpot[]
  touringRoutes           TouringRoute[]
}

model ScenicRegionInfo {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  scenicRegionId    String
  name              String       @db.VarChar(32)
  title             String       @db.VarChar(32)
  layer             String
  layersDisplayName String       @db.VarChar(32)
  vrUrl             String
  ticketUrl         String
  handDrawingUri    String
  lang              Language     @default(CHINESE)
  scenicRegion      ScenicRegion @relation(fields: [scenicRegionId], references: [id])
}

model ScenicSpotType {
  id                  String               @id @default(uuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  displayName         String               @db.VarChar(32)
  icon                String
  scenicSpotTypeInfos ScenicSpotTypeInfo[]
}

model ScenicSpotTypeInfo {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  scenicSpotTypeId String
  name             String         @db.VarChar(32)
  lang             Language       @default(CHINESE)
  scenicSpotType   ScenicSpotType @relation(fields: [scenicSpotTypeId], references: [id])
}

model ScenicSpot {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  scenicRegionId   String
  scenicSpotTypeId String
  locationLat      Float            @db.DoublePrecision
  locationLng      Float            @db.DoublePrecision
  displayName      String
  hidden           Boolean
  scenicRegion     ScenicRegion     @relation(fields: [scenicRegionId], references: [id])
  scenicSpotInfos  ScenicSpotInfo[]
}

model ScenicSpotInfo {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  scenicSpotId String
  name         String
  introduction String
  iconUri      String
  audioUri     String
  imageUri     String
  lang         Language   @default(CHINESE)
  scenicSpot   ScenicSpot @relation(fields: [scenicSpotId], references: [id])
}

model TouringRoute {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  displayName       String
  scenicRegionId    String
  scenicRegion      ScenicRegion       @relation(fields: [scenicRegionId], references: [id])
  touringRouteInfos TouringRouteInfo[]
}

model TouringRouteInfo {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  touringRouteId String
  title          String
  content        String
  lang           Language     @default(CHINESE)
  touringRoute   TouringRoute @relation(fields: [touringRouteId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum SliceState {
  PENDING
  SLICING
  SUCCESS
}

enum Language {
  CHINESE
  ENGLISH
  JAPANESE
  KOREAN
}
